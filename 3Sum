class Solution {
public:
    vector<int> helper(vector<int>& nums, int i, int target){
        int j = i+1;
        int k = nums.size()-1;
        while(j < k){
            if(nums[j] + nums[k] == target){
                vector<int> temp;
                temp.push_back(nums[j]);
                temp.push_back(nums[k]);
                while(j< k && nums[j+1] == nums[j]){
                    j++;
                }
                while(j < k && nums[k-1] == nums[k]){
                    k--;
                }
                return temp;
            }
            else if(nums[j] + nums[k] < target){
                j++;
            }else{
                k--;
            }
        }
        
        return {0};
    }
    vector<vector<int>> threeSum(vector<int>& nums) {
        if(nums.size() < 3){
            return {};
        }
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        for(int i = 0; i < nums.size()-2; i++){
            if(i > 0 && nums[i] == nums[i-1]){
                continue;
            }
            int target = 0-nums[i];
            int j = i+1;
            int k = nums.size()-1;
            while(j < k){
                if(nums[j] + nums[k] == target){
                    ans.push_back({nums[i],nums[j],nums[k]});
                    int temp = nums[j];
                    int temp2 = nums[k];
                    while(j < k && nums[j] == temp){
                        j++;
                    }
                    while(j < k && nums[k] == temp2){
                        k--;
                    }
                }
                else if(nums[j] + nums[k] < target){
                    j++;
                }else{
                    k--;
                }
            }
        }
        return ans;
    }
};
