class Solution {
public:
    int visited[50][50];
    int helper(vector<vector<int>>& grid, int i, int j, int row, int col){
        if(!(i >= 0 && j >= 0 && i < row && j < col)){
            return 0;
        }
        int ans = 0;
        if(grid[i][j] == 1 && visited[i][j] == 0){
            ans++;
            visited[i][j] = 1;
            ans += helper(grid,i-1,j,row,col);
            ans += helper(grid,i,j+1,row,col);
            ans += helper(grid,i+1,j,row,col);
            ans += helper(grid,i,j-1,row,col);
        }
        
        return ans;
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        
        int max = 0;
        memset(visited,0,sizeof visited);
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                if(grid[i][j] == 1){
                    int curr = helper(grid,i,j, grid.size(), grid[0].size());
                    if(curr > max){
                        max = curr;
                    }
                }
            }
        }
        return max;
    }
};
