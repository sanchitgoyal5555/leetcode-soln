class Solution
{
    public:
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    int dp[201][201];
    int helper(int n, int f){
        if(f == 0 || f == 1){
            return f;
        }
        if(n == 1){
            return f;
        }
        if(dp[n][f] != -1){
            return dp[n][f];
        }
        int mn = INT_MAX;
        for(int k = 1; k <= f; k++){
            int temp = 1+max( helper(n-1,k-1), helper(n,f-k));
            mn = min(temp,mn);
        }
        return dp[n][f] = mn;
    }
    int eggDrop(int n, int k) 
    {
        // your code here
        memset(dp,-1,sizeof(dp));
        return helper(n,k);
    }
};
