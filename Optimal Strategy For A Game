class Solution{
    public:
    long long helper(int arr[], int n, int i, int j, vector<vector<long long>>& dp){
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        if(i == j){
            return arr[i];
        }
        if(i+1 == j){
            return max(arr[i], arr[j]);
        }
        if(i >= 0 && j >= 0 && i < n && j < n){
            int opt1 = arr[i] + min(helper(arr, n, i+1, j-1, dp), helper(arr, n, i+2, j, dp));
            int opt2 = arr[j] + min(helper(arr, n, i, j-2, dp), helper(arr, n, i+1, j-1, dp));
            dp[i][j] = max(opt1, opt2);
            return dp[i][j];
        }
        return 0;
        
    }
    long long maximumAmount(int arr[], int n){
        // Your code here
        vector<vector<long long>> dp( 1001 , vector<long long> (1001, -1)); 
	    return helper(arr, n, 0, n-1, dp);
    }
};
