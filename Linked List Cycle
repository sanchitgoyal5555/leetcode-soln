/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        // ListNode* slow=head;
        // ListNode* fast=head;
        // while(fast && slow && fast->next){
        //     slow=slow->next;
        //     fast=fast->next->next;
        //     if(fast==slow)
        //         return true;
        // }
        // return false;

        if(head == NULL || head->next == NULL){
            return false;
        }
        unordered_map<ListNode* ,int> umap;
        while(head != NULL){
            if(umap.count(head) > 0){
                return true;
            }
            umap[head]++;
            head = head->next;
        }
        return false;
    }
};
