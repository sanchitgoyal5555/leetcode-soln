class LRUCache {
public:
    class node{
        public:
        int key;
        int val;
        node* next;
        node* prev;
        
        node( int key , int val)
        {
            this->key = key;
            this->val=val;
            this->next=NULL;
            this->prev=NULL;
            
        }
    };

    unordered_map<int, node*> ump;
    int limit;
    node * head = new node(0,0);
    node * tail = new node(0,0);
    
    LRUCache(int capacity) {
        limit = capacity;
        head->next = tail;
        tail->prev = head;
    }
    
    void insert(node* curr){
        ump[curr->key] = curr;
        curr->next = head->next;
        curr->prev = head;
        head->next->prev = curr;
        head->next = curr;
        
    }
    void remove(node* curr){
        ump.erase(curr->key);
        curr->prev->next = curr->next;
        curr->next->prev = curr->prev;
    }
    
    int get(int key) {
        if(ump.find(key) == ump.end()){
            return -1;
        }
        node* temp = ump[key];
        remove(temp);
        insert(temp);
        return temp->val;
    }
    
    void put(int key, int value) {
        if(ump.find(key) != ump.end()){
            remove(ump[key]);
        }
        else if(ump.size() == limit){
            remove(tail->prev);
        }
        
        insert(new node(key, value));
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
