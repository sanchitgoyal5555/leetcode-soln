class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        if(nums.size() < 4){
            return {};
        }
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        for(int i = 0; i < n; i++){
            if(nums[i] > 0 && target <= 0) break;
            for(int j = i+1; j < n; j++){
                int k = j + 1;
                int l = n-1;
                int temp = target-(nums[i]+nums[j]);
                while(k < l){
                    if(nums[k] + nums[l] < temp){
                        k++;
                    }
                    else if(nums[k] + nums[l] > temp){
                        l--;
                    }
                    else{
                        vector<int> curr = {nums[i],nums[j], nums[k], nums[l]};
                        // sort(curr.begin(), curr.end());
                        ans.push_back(curr);
                        int prev_l = nums[l];
                        int prev_k = nums[k];
                        while(l > k && nums[l] == prev_l){
                            --l;
                        }
                        while(l < k && nums[k] == prev_k){
                            ++k;
                        }
                    }
                }
            }
        }
        // return ans;
        set<vector<int>> s1;
        for(int i = 0; i < ans.size(); i++){
            s1.insert(ans[i]);
        }
        ans.clear();
        for(auto num:s1){
            ans.push_back(num);
        }
        
        return ans;
        
    }
};
