class Solution {
public:
//     int dp[201][201] = {-1};
//     int helper(vector<vector<int>>& grid, int m, int n, int i, int j){
//         if(i == m-1 && j == n-1){
//             return dp[i][j] = grid[i][j];
//         }
//         if(i >= m || j >= n){
//             return 1000;
//         }
//         if(dp[i][j] != -1){
//             return dp[i][j];
//         }
//         int a = helper(grid,m,n,i+1,j);
//         int b = helper(grid,m,n,i,j+1);
//         if(a == 1000){
//             return grid[i][j]+b;
//         }
//         if(b == 1000){
//             return grid[i][j]+a;
//         }
        
//         return dp[i][j] = grid[i][j] + min(a,b);
        
//     }
    
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,1000));
        dp[m-1][n-1] = grid[m-1][n-1];
        
        for(int i = m-2; i >= 0; i--){
            dp[i][n-1] = grid[i][n-1] + dp[i+1][n-1];
        }
        for(int j = n-2; j >= 0; j--){
            dp[m-1][j] = grid[m-1][j] + dp[m-1][j+1];
        }
        for(int i = m-2; i >= 0; i--){
            for(int j = n-2; j >= 0; j--){
                if(dp[i][j] != 1000){
                    continue;
                }
                else{
                    dp[i][j] = grid[i][j] + min(dp[i+1][j], dp[i][j+1]);
                }
            }
        }
        
        return dp[0][0];
        // return helper(grid,m,n,0,0);
    }
};
