class MedianFinder {
public:
    priority_queue<int> maxheap;
    priority_queue<int,vector<int>, greater<int>> minheap;
    MedianFinder() {
    }
    
    void addNum(int num) {
        if(maxheap.size() == 0){
            maxheap.push(num);
        }
        else if(maxheap.size() == minheap.size()){
            if(minheap.top() >= num){
                maxheap.push(num);
            }
            else{
                minheap.push(num);
                maxheap.push(minheap.top());
                minheap.pop();
            }
        }
        else{
            maxheap.push(num);
            minheap.push(maxheap.top());
            maxheap.pop();
        }
    }
    
    double findMedian() {
        if((maxheap.size() + minheap.size())%2 == 0){
            double mid1 = maxheap.top();
            double mid2 = minheap.top();
            return (double)(mid1+mid2)/2;
        }
        else{
            return (double)(maxheap.size() >= minheap.size())?maxheap.top() :                              minheap.top();
        }
    }
    
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
