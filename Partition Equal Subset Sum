class Solution {
public:
    
    bool helper(vector<int>& nums, int target, int n, vector<vector<int>>& dp){
        if(target == 0){
            return true;
        }
        if(n == 0){
            return false;
        }
        
        if(dp[n][target] != -1){
            return dp[n][target];
        }
        if(nums[n-1] <= target){
            dp[n][target] = helper(nums, target-nums[n-1], n-1, dp) || helper(nums, target, n-1, dp);
            return dp[n][target];
        }
        else{
            dp[n][target] = helper(nums, target, n-1, dp);
            return dp[n][target];
        }
        
    }
    
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
        }
        if(sum%2!=0)return 0;
        int n = nums.size();
        vector<vector<int>>dp(201,vector<int>(10001,-1));
        return helper(nums, sum/2, n, dp);
    }
    
//     bool canPartition(vector<int>& nums) {
//         int n = nums.size();
//         int sum = 0;
//         for(int i = 0; i < nums.size(); i++){
//             sum += nums[i];
//         }
//         if(sum == 0 || sum%2 == 1){
//             return false;
//         }
//         sum = sum/2;
//         vector<vector<bool>>dp(n+1,vector<bool>(sum, false));
//         for(int i = 0; i <= n; i++){
//             dp[i][0] = true;
//         }
//         for(int i = 0; i <= sum; i++){
//             dp[0][i] = false;
//         }
        
//         for(int i = 1; i <= n; i++){
//             for(int j = 1; j <= sum; j++){
//                 if(nums[i-1] <= j){
//                     dp[i][j] = dp[i-1][j-nums[i-1]] || dp[i-1][j];
//                 }
//                 else{
//                     dp[i][j] = dp[i-1][j];
//                 }
//             }
//         }
//         return dp[n][sum];
        
//     }
    
};
