int dx[] = {-1, 0, 1, 0, -1, -1, 1, 1};
int dy[] = {0, 1, 0, -1, -1, 1, 1, -1};
class Solution {
public:
    
    
    bool isValid(vector<vector<char>>& board, int i, int j) {
        return (i >= 0 && j >= 0 && i < board.size() && j < board[0].size());
    }
    
    int counter(vector<vector<char>>& board, int i, int j){
        int count = 0;
        for(int k = 0; k < 8; k++){
            int new_i = i + dx[k];
            int new_j = j + dy[k];
            if(isValid(board, new_i, new_j) && board[new_i][new_j] == 'M'){
                count++;
            }
        }
        return count;
    }
    void helper(vector<vector<char>>& board, vector<vector<bool>>& visited, int i, int j){
        if(!isValid(board, i, j) || visited[i][j]){
            return;
        }
        visited[i][j] = true;
        if(board[i][j] == 'M'){
            board[i][j] = 'X';
            return;
        }
        if(board[i][j] == 'E'){
            int temp = counter(board, i, j);
            if(temp == 0){
                board[i][j] = 'B';
                for(int k = 0; k < 8; k++){
                    int new_i = i + dx[k];
                    int new_j = j + dy[k];
                    if(isValid(board, new_i, new_j)){
                        helper(board, visited, new_i, new_j);
                    }
                }
            }
            else{
                board[i][j] = temp+'0';
                return;
            }
        }
        
        
    }
    
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        int m = board.size();
        int n = board[0].size();
         vector<vector<bool>> visited(m, vector<bool>(n, false));
        
        helper(board, visited, click[0], click[1]);
        
        return board;
    }
};
