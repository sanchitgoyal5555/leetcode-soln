class myComparator {
  public:
    bool operator() (pair<int,string> &p1, pair<int,string> &p2) {
      if(p1.first == p2.first) return p1.second > p2.second;
      
      return p1.first < p2.first;
    }
};

class FoodRatings {
    unordered_map<string,priority_queue<pair<int,string>,vector<pair<int,string>>,myComparator>
>mp;
    unordered_map<string,int>rate;
    unordered_map<string,string>cuis;
public:
    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings) {
        int n = foods.size();
        for(int i = 0; i < n; i++)
        {
            mp[cuisines[i]].push({ratings[i],foods[i]});
            cuis[foods[i]] = cuisines[i];
            rate[foods[i]] = ratings[i];
        }
    }
    
    void changeRating(string food, int newRating) {
        rate[food] = newRating; 
        string cuisine = cuis[food];
        mp[cuisine].push({newRating,food});
    }
    
    string highestRated(string cuisine) {
        while(1)
        {
            auto it = mp[cuisine].top();
            //cout<<it.second<<" "<<it.first<<" ";
            if(rate[it.second] == it.first)return it.second;
            else mp[cuisine].pop();
        }
    }
};

/**
 * Your FoodRatings object will be instantiated and called as such:
 * FoodRatings* obj = new FoodRatings(foods, cuisines, ratings);
 * obj->changeRating(food,newRating);
 * string param_2 = obj->highestRated(cuisine);
 */
