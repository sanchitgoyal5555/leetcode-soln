class Solution {
public:
    
    
    void dfs(int i, int j, int m, int n, vector<vector<int>>& visited, set<pair<int,int>> & ones){
        if(i > m-1){
            return;
        }
        if(j > n-1){
            return;
        }
        if(visited[i][j] == 1){
            return;
        }
        visited[i][j] = 1;
        auto it = ones.find({i,j});
        
        if(it != ones.end()){
            cout<<i<<" "<<j<<" ";
            ones.erase(it);
            dfs(i+1, j, m, n, visited, ones);
            dfs(i, j+1, m, n, visited, ones);
            if(i-1 >= 0){
                dfs(i-1, j, m, n, visited, ones);
            }
            if(j-1 >= 0){
                dfs(i, j-1, m, n, visited, ones);
            }
        }
        
       
   
        
    }
    
    int numIslands(vector<vector<char>>& grid) {
        
        int m=grid.size();
        
        int n=grid[0].size();
       
        
        vector<vector<int>> visited(m, vector<int>(n,0));
        
        set<pair<int, int>> ones;
        
        int count = 0;
        
        for(int i=0;i<m; i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == '1'){
                   
                    ones.insert({i,j});
                }
            }
        }
       
        while(!ones.empty()){
            
            auto itr = ones.begin();
            
            int i=itr->first; int j=itr->second;
            
            dfs(i, j, m, n, visited, ones);
            count++;
            
        }
        
        return count;
    }
};
