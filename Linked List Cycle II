/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        
        if(head == NULL || head->next == NULL){
            return NULL;
        }
        unordered_set<ListNode*> s1;
        //s1.insert(head);
        while(head){
            if(s1.find(head) != s1.end()){
                return head;
            }
            s1.insert(head);
            head = head->next;
        }
        return NULL;
        
        // ListNode* slow=head;
        // ListNode* fast=head;   
        // while(fast&&fast->next)
        // {
        //     slow=slow->next;
        //     fast=fast->next->next;
        //   if(slow==fast)
        //    break;   
        // }
        //    if(fast==NULL || fast->next==NULL) return NULL;
        // slow=head;
        // while(slow!=fast)
        // {
        //     slow=slow->next;
        //     fast=fast->next;
        // }
        // return slow;
        

    }
};
