/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* helper(vector<int>& preorder, vector<int>& inorder, int prestart, int preend, int instart, int inend){
        if(prestart > preend || instart > inend){
            return NULL;
        }
        TreeNode* root = new TreeNode(preorder[prestart]);
        int i = instart;
        while(i <= inend && inorder[i] != root->val){
            i++;
        }
        root->left = helper(preorder, inorder, prestart+1,prestart+i-instart,
                           instart, i-1);
        root->right = helper(preorder, inorder, prestart+i-instart+1, preend,
                            i+1,inend);
        return root;
        
    }
                     
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return helper(preorder, inorder, 0, preorder.size()-1, 0,                                 inorder.size()-1);
        
    }
};
